--- a/extensions/libipt_MASQUERADE.c	2009-12-09 22:12:05.000000000 +0800
+++ b/extensions/libipt_MASQUERADE.c	2014-03-06 10:37:32.496834792 +0800
@@ -16,12 +16,15 @@
 " --to-ports <port>[-<port>]\n"
 "				Port (range) to map to.\n"
 " --random\n"
-"				Randomize source port.\n");
+"				Randomize source port.\n"
+" --mode <fullcone|symmetric>\n");
 }
 
 static const struct option MASQUERADE_opts[] = {
 	{ "to-ports", 1, NULL, '1' },
 	{ "random", 0, NULL, '2' },
+/* paul_shih, 11/26/2010, brcm supports fullcone mode additionally */
+	{ "mode", 1, NULL, '3' },
 	{ .name = NULL }
 };
 
@@ -85,6 +88,9 @@
 	else
 		portok = 0;
 
+/* paul_shih, 11/26/2010, brcm supports fullcone mode additionally */
+	/* Borrow this field as mode value. The default is symmetric */
+	mr->range[0].min_ip = 0;
 	switch (c) {
 	case '1':
 		if (!portok)
@@ -101,6 +107,17 @@
 	case '2':
 		mr->range[0].flags |=  IP_NAT_RANGE_PROTO_RANDOM;
 		return 1;
+/* paul_shih, 11/26/2010, brcm supports fullcone mode additionally */
+	case '3':
+		if (strcasecmp(optarg, "fullcone") == 0)
+			mr->range[0].min_ip = 1;
+		else if (strcasecmp(optarg, "symmetric") == 0)
+			mr->range[0].min_ip = 0;
+		else
+			xtables_error(PARAMETER_PROBLEM,
+				   "Unknown mode %s", optarg);
+
+		return 1;
 
 	default:
 		return 0;
@@ -124,6 +141,9 @@
 
 	if (r->flags & IP_NAT_RANGE_PROTO_RANDOM)
 		printf("random ");
+/* paul_shih, 11/26/2010, brcm supports fullcone mode additionally */
+	if (r->min_ip == 1)
+		printf("mode: fullcone ");
 }
 
 static void
@@ -141,6 +161,9 @@
 
 	if (r->flags & IP_NAT_RANGE_PROTO_RANDOM)
 		printf("--random ");
+/* paul_shih, 11/26/2010, brcm supports fullcone mode additionally */
+	if (r->min_ip == 1)
+		printf("--mode fullcone ");
 }
 
 static struct xtables_target masquerade_tg_reg = {
