diff -urNd ez-ipupdate-3.0.11b8.orig/ez-ipupdate.c ez-ipupdate-3.0.11b8/ez-ipupdate.c
--- ez-ipupdate-3.0.11b8.orig/ez-ipupdate.c	2002-03-12 07:31:47.000000000 +0800
+++ ez-ipupdate-3.0.11b8/ez-ipupdate.c	2011-11-11 16:38:50.000000000 +0800
@@ -42,6 +42,7 @@
 // if bad things happend and it has to exit when in daemon mode.
 #define SEND_EMAIL_CMD "mail"
 
+#if 0
 #define EZIP_DEFAULT_SERVER "www.EZ-IP.Net"
 #define EZIP_DEFAULT_PORT "80"
 #define EZIP_REQUEST "/members/update/"
@@ -55,6 +56,7 @@
 #define DHS_DEFAULT_PORT "80"
 #define DHS_REQUEST "/nic/hosts"
 #define DHS_SUCKY_TIMEOUT 60
+#endif
 
 #define DYNDNS_DEFAULT_SERVER "members.dyndns.org"
 #define DYNDNS_DEFAULT_PORT "80"
@@ -62,6 +64,7 @@
 #define DYNDNS_STAT_REQUEST "/nic/update"
 #define DYNDNS_MAX_INTERVAL (25*24*3600)
 
+#if 0
 #define ODS_DEFAULT_SERVER "update.ods.org"
 #define ODS_DEFAULT_PORT "7070"
 #define ODS_REQUEST "update"
@@ -102,6 +105,7 @@
 #define HEIPV6TB_DEFAULT_SERVER "ipv6tb.he.net"
 #define HEIPV6TB_DEFAULT_PORT "80"
 #define HEIPV6TB_REQUEST "/index.cgi"
+#endif
 
 #define DEFAULT_TIMEOUT 120
 #define DEFAULT_UPDATE_PERIOD 120
@@ -271,6 +275,7 @@
 char *notify_email = NULL;
 char *pid_file = NULL;
 char *partner = NULL;
+char *backmx = NULL;
 
 static volatile int client_sockfd;
 static volatile int last_sig = 0;
@@ -281,6 +286,7 @@
 int NULL_check_info(void);
 static char *NULL_fields_used[] = { NULL };
 
+#if 0
 int EZIP_update_entry(void);
 int EZIP_check_info(void);
 static char *EZIP_fields_used[] = { "server", "user", "address", "wildcard", "mx", "url", "host", NULL };
@@ -292,6 +298,7 @@
 int DHS_update_entry(void);
 int DHS_check_info(void);
 static char *DHS_fields_used[] = { "server", "user", "address", "wildcard", "mx", "url", "host", NULL };
+#endif
 
 void DYNDNS_init(void);
 int DYNDNS_update_entry(void);
@@ -299,6 +306,7 @@
 static char *DYNDNS_fields_used[] = { "server", "user", "address", "wildcard", "mx", "host", NULL };
 static char *DYNDNS_STAT_fields_used[] = { "server", "user", "address", "wildcard", "mx", "host", NULL };
 
+#if 0
 int ODS_update_entry(void);
 int ODS_check_info(void);
 static char *ODS_fields_used[] = { "server", "host", "address", NULL };
@@ -340,6 +348,7 @@
 int HEIPV6TB_update_entry(void);
 int HEIPV6TB_check_info(void);
 static char *HEIPV6TB_fields_used[] = { "server", "user", NULL };
+#endif
 
 struct service_t services[] = {
   { "NULL",
@@ -352,6 +361,7 @@
     "",
     ""
   },
+#if 0
   { "ez-ip",
     { "ezip", "ez-ip", 0, },
     NULL,
@@ -382,6 +392,7 @@
     DHS_DEFAULT_PORT,
     DHS_REQUEST
   },
+#endif
   { "dyndns",
     { "dyndns", 0, 0, },
     DYNDNS_init,
@@ -412,6 +423,7 @@
     DYNDNS_DEFAULT_PORT,
     DYNDNS_REQUEST
   },
+#if 0
   { "ods",
     { "ods", 0, 0, },
     NULL,
@@ -514,6 +526,7 @@
     HEIPV6TB_DEFAULT_PORT,
     HEIPV6TB_REQUEST
   },
+#endif
 };
 
 static struct service_t *service = NULL;
@@ -557,6 +570,7 @@
   CMD_pid_file,
   CMD_offline,
   CMD_partner,
+  CMD_backmx,
   CMD__end
 };
 
@@ -591,6 +605,7 @@
   { CMD_connection_type, "connection-type", CONF_NEED_ARG, 1, conf_handler, "%s=<connection type>" },
   { CMD_request,         "request",         CONF_NEED_ARG, 1, conf_handler, "%s=<request uri>" },
   { CMD_partner,         "partner",         CONF_NEED_ARG, 1, conf_handler, "%s=<easydns partner>" },
+  { CMD_backmx,          "backmx",          CONF_NEED_ARG, 1, conf_handler, "%s=<YES|NO>" },
   { 0, 0, 0, 0, 0 }
 };
 
@@ -1142,6 +1157,12 @@
       dprintf((stderr, "cache_file: %s\n", cache_file));
       break;
 
+    case CMD_backmx:
+      if(backmx) { free(backmx); }
+      backmx = strdup(optarg);
+      dprintf((stderr, "backmx: %d\n", backmx));
+      break;
+
     default:
       dprintf((stderr, "case not handled: %d\n", id));
       break;
@@ -1198,6 +1219,7 @@
       {"version",         no_argument,            0, 'V'},
       {"credits",         no_argument,            0, 'C'},
       {"signalhelp",      no_argument,            0, 'Z'},
+      {"backmx",          required_argument,      0, 'B'},
       {0,0,0,0}
   };
 #else
@@ -1205,7 +1227,7 @@
 #endif
   int opt;
 
-  while((opt=xgetopt(argc, argv, "a:b:c:dDe:fF:g:h:i:L:m:M:N:o:p:P:qQ:r:R:s:S:t:T:U:u:wHVCZz:", 
+  while((opt=xgetopt(argc, argv, "a:b:c:dDe:fF:g:h:i:L:m:M:N:o:p:P:qQ:r:R:s:S:t:T:U:u:wHVCZz:B:", 
           long_options, NULL)) != -1)
   {
     switch (opt)
@@ -1360,6 +1382,10 @@
         option_handler(CMD_partner, optarg);
         break;
 
+      case 'B':
+        option_handler(CMD_backmx, optarg);
+        break;
+
       default:
 #ifdef HAVE_GETOPT_LONG
         fprintf(stderr, "Try `%s --help' for more information\n", argv[0]);
@@ -1400,12 +1426,14 @@
   address.sin_family = AF_INET;
 
   // get the host address
+  log_to_file("all_resolving");
   hostinfo = gethostbyname(host);
   if(!hostinfo)
   {
     if(!(options & OPT_QUIET))
     {
       herror("gethostbyname");
+      log_to_file("all_errresolv");
     }
     close(*sock);
     return(-1);
@@ -1424,12 +1452,14 @@
   }
 
   // connect the socket
+  log_to_file("all_connecting");
   len = sizeof(address);
   if((result=connect(*sock, (struct sockaddr *)&address, len)) == -1) 
   {
     if(!(options & OPT_QUIET))
     {
       perror("connect");
+      log_to_file("all_connectfail");
     }
     close(*sock);
     return(-1);
@@ -1643,6 +1673,7 @@
 #endif
 }
 
+#if 0
 static int PGPOW_read_response(char *buf)
 {
   int bytes; 
@@ -1695,6 +1726,7 @@
   
   return(atoi(buf));
 }
+#endif
 
 int NULL_check_info(void)
 {
@@ -1716,6 +1748,7 @@
   return(0);
 }
 
+#if 0
 int EZIP_check_info(void)
 {
   warn_fields(service->fields_used);
@@ -1828,6 +1861,7 @@
 
   return(UPDATERES_OK);
 }
+#endif
 
 void DYNDNS_init(void)
 {
@@ -1902,6 +1936,7 @@
     {
       show_message("error connecting to %s:%s\n", server, port);
     }
+    log_to_file("dyn_strange");
     return(UPDATERES_ERROR);
   }
 
@@ -1933,8 +1968,11 @@
     snprintf(buf, BUFFER_SIZE, "%s=%s&", "mx", mx);
     output(buf);
   }
-  //snprintf(buf, BUFFER_SIZE, "%s=%s&", "backmx", "NO");
-  //output(buf);
+  if(backmx != NULL && backmx != '\0') 
+  {
+    snprintf(buf, BUFFER_SIZE, "%s=%s&", "backmx", backmx);
+    output(buf);
+  }
   if(options & OPT_OFFLINE)
   {
     snprintf(buf, BUFFER_SIZE, "%s=%s&", "offline", "yes");
@@ -1977,6 +2015,7 @@
       if(!(options & OPT_QUIET))
       {
         show_message("strange server response, are you connecting to the right server?\n");
+        log_to_file("errresolv");
       }
       retval = UPDATERES_ERROR;
       break;
@@ -1987,33 +2026,47 @@
         if(!(options & OPT_QUIET))
         {
           printf("request successful\n");
+          log_to_file("dyn_good");
         }
       }
+      else if(strstr(buf, "\ngood\r\n") != NULL)	// cdrouter_dyndns_101
+      {
+        if(!(options & OPT_QUIET))
+        {
+          printf("request successful\n");
+          log_to_file("dyn_good");
+        }	
+      }
       else
       {
         if(strstr(buf, "\nnohost") != NULL)
         {
           show_message("invalid hostname: %s\n", host);
+          log_to_file("dyn_nohost");
           retval = UPDATERES_SHUTDOWN;
         }
         else if(strstr(buf, "\nnotfqdn") != NULL)
         {
           show_message("malformed hostname: %s\n", host);
+          log_to_file("dyn_notfqdn");
           retval = UPDATERES_SHUTDOWN;
         }
         else if(strstr(buf, "\n!yours") != NULL)
         {
           show_message("host \"%s\" is not under your control\n", host);
+          log_to_file("dyn_!yours");
           retval = UPDATERES_SHUTDOWN;
         }
         else if(strstr(buf, "\nabuse") != NULL)
         {
           show_message("host \"%s\" has been blocked for abuse\n", host);
+          log_to_file("dyn_abuse");
           retval = UPDATERES_SHUTDOWN;
         }
         else if(strstr(buf, "\nnochg") != NULL)
         {
           show_message("%s says that your IP address has not changed since the last update\n", server);
+          log_to_file("dyn_nochg");
           // lets say that this counts as a successful update
           // but we'll roll back the last update time to max_interval/2
           if(max_interval > 0)
@@ -2025,21 +2078,25 @@
         else if(strstr(buf, "\nbadauth") != NULL)
         {
           show_message("authentication failure\n");
+          log_to_file("dyn_badauth");
           retval = UPDATERES_SHUTDOWN;
         }
         else if(strstr(buf, "\nbadsys") != NULL)
         {
           show_message("invalid system parameter\n");
+          log_to_file("dyn_badsys");
           retval = UPDATERES_SHUTDOWN;
         }
         else if(strstr(buf, "\nbadagent") != NULL)
         {
           show_message("this useragent has been blocked\n");
+          log_to_file("dyn_badagent");
           retval = UPDATERES_SHUTDOWN;
         }
         else if(strstr(buf, "\nnumhost") != NULL)
         {
           show_message("Too many or too few hosts found\n");
+          log_to_file("dyn_numhost");
           retval = UPDATERES_SHUTDOWN;
         }
         else if(strstr(buf, "\ndnserr") != NULL)
@@ -2047,21 +2104,25 @@
           char *p = strstr(buf, "\ndnserr");
           show_message("dyndns internal error, please report this number to "
               "their support people: %s\n", N_STR(p));
+          log_to_file("dyn_dnserr");
           retval = UPDATERES_ERROR;
         }
         else if(strstr(buf, "\n911") != NULL)
         {
           show_message("Ahhhh! call 911!\n");
+          log_to_file("dyn_911");
           retval = UPDATERES_SHUTDOWN;
         }
         else if(strstr(buf, "\n999") != NULL)
         {
           show_message("Ahhhh! call 999!\n");
+          log_to_file("dyn_999");
           retval = UPDATERES_SHUTDOWN;
         }
         else if(strstr(buf, "\n!donator") != NULL)
         {
           show_message("a feature requested is only available to donators, please donate.\n", host);
+          log_to_file("dyn_!donator");
           retval = UPDATERES_OK;
         }
         // this one should be last as it is a stupid string to signify waits
@@ -2104,6 +2165,7 @@
         else
         {
           show_message("error processing request\n");
+          log_to_file("error processing request\n");
           if(!(options & OPT_QUIET))
           {
             fprintf(stderr, "==== server output: ====\n%s\n", buf);
@@ -2117,6 +2179,7 @@
       if(!(options & OPT_QUIET))
       {
         show_message("authentication failure\n");
+        log_to_file("dyn_badauth");
       }
       retval = UPDATERES_SHUTDOWN;
       break;
@@ -2128,6 +2191,7 @@
         *auth = '\0';
         sscanf(buf, " HTTP/1.%*c %*3d %255[^\r\n]", auth);
         show_message("unknown return code: %d\n", ret);
+        log_to_file("dyn_uncode");
         fprintf(stderr, "server response: %s\n", auth);
       }
       retval = UPDATERES_ERROR;
@@ -2137,6 +2201,7 @@
   return(retval);
 }
 
+#if 0
 int PGPOW_check_info(void)
 {
   char buf[BUFSIZ+1];
@@ -4245,6 +4310,7 @@
 
   return(UPDATERES_OK);
 }
+#endif
 
 static int is_in_list(char *needle, char **haystack)
 {
@@ -4812,10 +4878,15 @@
           retval = 0;
           break;
         }
-        if(i+1 != ntrys) { sleep(10 + 10*i); }
+        if(i+1 != ntrys) 
+        { 
+          fprintf(stderr, "%d: Waiting for %d to re-update\n", i, 10 + 10*i);
+          sleep(10 + 10*i); 
+        }
       }
       if(retval == 0 && post_update_cmd)
       {
+        sprintf(post_update_cmd_arg, "%s", address);
         if((res=exec_cmd(post_update_cmd)) != 0)
         {
           if(!(options & OPT_QUIET))
@@ -4898,3 +4969,17 @@
   return(retval);
 }
 
+/*barry*/
+int log_to_file(char *datas)
+{
+	FILE *fp;
+
+        if ((fp = fopen("/tmp/ddns_msg", "w")) != NULL) {
+		fprintf(fp, "%s", datas);
+		fflush(fp);
+		fclose(fp);
+		return 1;
+	}
+	else
+		return 0;
+}
