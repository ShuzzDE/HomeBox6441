diff -rpu a/src/rfc1035.c b/src/rfc1035.c
--- a/src/rfc1035.c	2014-10-24 02:08:58.276186371 +0000
+++ b/src/rfc1035.c	2014-10-28 08:08:35.848145614 +0000
@@ -1735,10 +1735,10 @@ int lan_find_name_by_addr(struct in_addr
  ** currently, the dnsmasq cannot resolve the "nslookup unkownXXXXXXXXXXXX" query function,
  ** so i add this function for resolving the problem
 **/
-int lan_find_ip_by_namemac(char *name, char *search_ip)
+int lan_find_ip_by_namemac(char *name, char *search_ip, int str_len)
 {
     FILE *fp;
-    int ret = 0, n, id_len;
+    int n, id_len, pos, ip_count;
     char *p, *id = "unknown";
     char line[1024];
     char search_mac[32];
@@ -1763,6 +1763,8 @@ int lan_find_ip_by_namemac(char *name, c
 
     fp = fopen(ARP_FILE, "r");
     if (fp){
+        pos = 0;
+        ip_count = 0;
         while(fgets(line, sizeof(line), fp)!=NULL){
             char ip[32];
             char type[32];
@@ -1788,17 +1790,22 @@ int lan_find_ip_by_namemac(char *name, c
 
             if (strncasecmp(&(name[id_len]), search_mac, 12) == 0){
                 n = strlen(ip);
-                strncpy(search_ip, ip, n);
-                search_ip[n] = '\0';
-                ret = 1;
-                break;
+                if (str_len <= pos + n + 1) break;
+                if (ip_count) {
+                    search_ip[pos++] = ',';
+                }
+                strncpy(&(search_ip[pos]), ip, n);
+                pos += n;
+                ip_count++;
             }
         }
 
+        search_ip[pos] = '\0';
+
         fclose(fp);
     }
 
-    return ret;
+    return ip_count;
 }
 
 #undef ARP_FILE
@@ -2010,14 +2017,34 @@ size_t answer_request(struct dns_header
                 //which X represents the mac address
                 if (!ans){
                     if(qtype == T_A || qtype == T_ANY){
-                        char ip_str[32];
-                        if (lan_find_ip_by_namemac(name, ip_str)){
+                        char ip_str[64];
+                        if (lan_find_ip_by_namemac(name, ip_str, sizeof(ip_str))){
+                            char *p, *ip;
+
+                            ans = 1;
+                            ip = ip_str;
+                            do {
+                                p = strstr(ip, ",");
+                                if (p) {
+                                    *p = '\0';
+                                }
+                                inet_aton(ip, &lan_addr.addr.addr4);
+                                lan_addr.addr.addr4 = ntohl(lan_addr.addr.addr4);
+                                if(add_resource_record(header, limit, &trunc, nameoffset, &ansp, 
+                                            daemon->local_ttl, NULL, T_A, C_IN, "4", &lan_addr))
+                                    anscount++;
+                                ip = p + 1;
+                            }while(p);
+                        }
+                    }
+                    //for this feature is not included into DNSV6,so
+                    //if we receive query about AAAA type of this format,
+                    //just answer NXDOMAIN.
+                    if(qtype == T_AAAA || qtype == T_ANY){
+                        char ip_str[64];
+                        if (lan_find_ip_by_namemac(name, ip_str, sizeof(ip_str))){
                             ans = 1;
-                            inet_aton(ip_str, &lan_addr.addr.addr4);                    
-                            lan_addr.addr.addr4 = ntohl(lan_addr.addr.addr4);
-                            if(add_resource_record(header, limit, &trunc, nameoffset, &ansp, 
-                                        daemon->local_ttl, NULL, T_A, C_IN, "4", &lan_addr))
-                                anscount++;
+                            nxdomain = 1;
                         }
                     }
                 }
