diff -Nur a/Makefile b/Makefile
--- a/Makefile	2014-01-03 14:02:39.000000000 +0800
+++ b/Makefile	2014-01-03 14:02:39.000000000 +0800
@@ -166,7 +166,8 @@
 # Don't include stuff already done in $(LIBS)
 SUBDIRS	= tools \
 	  examples/standalone \
-	  examples/api
+	  examples/api \
+	  SECboot
 
 .PHONY : $(SUBDIRS)
 
diff -Nur a/SECboot/arc_api.c b/SECboot/arc_api.c
--- a/SECboot/arc_api.c	1970-01-01 08:00:00.000000000 +0800
+++ b/SECboot/arc_api.c	2014-01-03 14:02:42.000000000 +0800
@@ -0,0 +1,22 @@
+#include <common.h>
+#include <exports.h>
+#include "sec_boot.h"
+
+__inline__ void arc_memcpy(void *destination, const void *source, u32 len){
+	
+	if(len<0)
+		return;
+
+	char *dst = destination;
+	const char *src = source;
+
+	while(--len){
+		*dst++ = *src++;
+	};
+}
+
+__inline__ void arc_read(u32 ram_addr, u8 *dst, u32 len){
+	printf("<%30s:%5d>: dst= %x, ram_addr =%x, len =%d\n", __func__, __LINE__, dst, ram_addr, len );
+	arc_memcpy((void *)dst ,(void *)ram_addr, len);
+}
+
diff -Nur a/SECboot/Makefile b/SECboot/Makefile
--- a/SECboot/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/SECboot/Makefile	2014-01-03 14:02:42.000000000 +0800
@@ -0,0 +1,97 @@
+#
+# (C) Copyright 2000-2006
+# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+include $(TOPDIR)/config.mk
+
+ELF-$(ARCH)  :=
+ELF-$(BOARD) :=
+ELF-$(CPU)   :=
+ELF-y        := sec_boot
+
+#
+# Some versions of make do not handle trailing white spaces properly;
+# leading to build failures. The problem was found with GNU Make 3.80.
+# Using 'strip' as a workaround for the problem.
+#
+ELF := $(strip $(ELF-y) $(ELF-$(ARCH)) $(ELF-$(BOARD)) $(ELF-$(CPU)))
+
+SREC = $(addsuffix .srec,$(ELF))
+BIN  = $(addsuffix .bin,$(ELF))
+
+COBJS	:= $(ELF:=.o)
+
+LIB	= $(obj)libstubs.a
+
+LIBAOBJS-$(ARCH)     :=
+LIBAOBJS-$(CPU)      :=
+LIBAOBJS-ppc         += $(ARCH)_longjmp.o $(ARCH)_setjmp.o
+LIBAOBJS-mpc8xx      += test_burst_lib.o
+LIBAOBJS := $(LIBAOBJS-$(ARCH)) $(LIBAOBJS-$(CPU))
+
+LIBCOBJS = stubs.o arc_api.o xor_cipher.o sec_boot.o
+
+LIBOBJS	= $(addprefix $(obj),$(LIBAOBJS) $(LIBCOBJS))
+
+SRCS	:= $(COBJS:.o=.c) $(LIBCOBJS:.o=.c) $(LIBAOBJS:.o=.S)
+OBJS	:= $(addprefix $(obj),$(COBJS))
+ELF	:= $(addprefix $(obj),$(ELF))
+BIN	:= $(addprefix $(obj),$(BIN))
+SREC	:= $(addprefix $(obj),$(SREC))
+
+gcclibdir := $(shell dirname `$(CC) -print-libgcc-file-name`)
+
+CPPFLAGS += -I..
+CFLAGS += -fomit-frame-pointer
+OBJFLAGS += -S -R .reginfo -R .notes -R .note -R .comment -R .mdebug -R .note.gnu.build-id
+
+all:	$(obj).depend $(OBJS) $(LIB) $(SREC) $(BIN) $(ELF)
+
+#########################################################################
+$(LIB):	$(obj).depend $(LIBOBJS)
+		$(AR) $(ARFLAGS) $@ $(LIBOBJS)
+
+$(ELF):
+$(obj)%:	$(obj)%.o $(LIB)
+		$(LD) -g -Ttext 0xAF000000 -T mips.lds \
+			-o $@ -e $(SYM_PREFIX)$(notdir $(<:.o=)) $< $(LIB) -Map $@.map \
+			-L$(gcclibdir) -lgcc
+
+$(SREC):
+$(obj)%.srec:	$(obj)%
+		$(OBJDUMP) -D -S $< > $<.dis
+		$(STRIP) $<
+		$(OBJCOPY) $(OBJFLAGS) -O srec $< $@ 2>/dev/null
+
+$(BIN):
+$(obj)%.bin:	$(obj)%
+		$(OBJCOPY) $(OBJFLAGS) -O binary $< $@ 2>/dev/null
+		dd if=$@ of=$(TOPDIR)/$@ bs=2k conv=sync
+
+#########################################################################
+
+# defines $(obj).depend target
+include $(SRCTREE)/rules.mk
+
+sinclude $(obj).depend
+
+#########################################################################
diff -Nur a/SECboot/mips.lds b/SECboot/mips.lds
--- a/SECboot/mips.lds	1970-01-01 08:00:00.000000000 +0800
+++ b/SECboot/mips.lds	2014-01-03 14:02:42.000000000 +0800
@@ -0,0 +1,63 @@
+/*
+ * (C) Copyright 2003
+ * Wolfgang Denk Engineering, <wd@denx.de>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/*
+OUTPUT_FORMAT("elf32-bigmips", "elf32-bigmips", "elf32-bigmips")
+*/
+OUTPUT_FORMAT("elf32-tradbigmips", "elf32-tradbigmips", "elf32-tradbigmips")
+OUTPUT_ARCH(mips)
+ENTRY(sec_boot)
+
+SECTIONS
+{
+	. = 0xAF000000; 
+
+	.text       :
+	{
+	  *(.text)
+	}
+
+	. = ALIGN(4);
+	.rodata  : { *(SORT_BY_ALIGNMENT(SORT_BY_NAME(.rodata*))) }
+
+	. = ALIGN(4);
+	.data  : { *(.data) }
+
+	. = .;
+	_gp = ALIGN(16) + 0x7ff0;
+
+	.got : {
+	  __got_start = .;
+	  *(.got)
+	  __got_end = .;
+	}
+
+	.sdata  : { *(.sdata) }
+
+	. = ALIGN(4);
+	__bss_start = .;
+	.sbss (NOLOAD) : { *(.sbss) }
+	.bss (NOLOAD)  : { *(.bss) . = ALIGN(4); }
+
+	_end = .;
+}
diff -Nur a/SECboot/sec_boot.c b/SECboot/sec_boot.c
--- a/SECboot/sec_boot.c	1970-01-01 08:00:00.000000000 +0800
+++ b/SECboot/sec_boot.c	2014-01-07 19:25:31.000000000 +0800
@@ -0,0 +1,34 @@
+/*****************************************************************************
+;
+;   (C) Unpublished Work of Arcadyan Incorporated.  All Rights Reserved.
+;
+;       THIS WORK IS AN UNPUBLISHED WORK AND CONTAINS CONFIDENTIAL,
+;       PROPRIETARY AND TRADESECRET INFORMATION OF ADMTEK INCORPORATED.
+;       ACCESS TO THIS WORK IS RESTRICTED TO (I) ADMTEK EMPLOYEES WHO HAVE A
+;       NEED TO KNOW TO PERFORM TASKS WITHIN THE SCOPE OF THEIR ASSIGNMENTS
+;       AND (II) ENTITIES OTHER THAN ADMTEK WHO HAVE ENTERED INTO APPROPRIATE
+;       LICENSE AGREEMENTS.  NO PART OF THIS WORK MAY BE USED, PRACTICED,
+;       PERFORMED, COPIED, DISTRIBUTED, REVISED, MODIFIED, TRANSLATED,
+;       ABBRIDGED, CONDENSED, EXPANDED, COLLECTED, COMPILED, LINKED, RECAST,
+;       TRANSFORMED OR ADAPTED WITHOUT THE PRIOR WRITTEN CONSENT OF ADMTEK.
+;       ANY USE OR EXPLOITATION OF THIS WORK WITHOUT AUTHORIZATION COULD
+;       SUBJECT THE PERPETRATOR TO CRIMINAL AND CIVIL LIABILITY.
+;	
+;*****************************************************************************/
+#include <common.h>
+#include <exports.h>
+#include "sec_boot.h"
+
+#define LENGTH 				0x200000
+#define TMP_KERNEL_ADDR		0xA4000000
+#define REAL_KERNEL_ADDR	0xA0800000
+
+int sec_boot (int argc, char *argv[])
+{
+	printf("<%30s:%5d>: Decrypt kernel at %x\n", __func__, __LINE__, TMP_KERNEL_ADDR);
+	
+	arc_img_dec(TMP_KERNEL_ADDR, LENGTH, NULL);
+	my_memcpy(REAL_KERNEL_ADDR, TMP_KERNEL_ADDR, LENGTH);
+	return 0;
+}
+
diff -Nur a/SECboot/sec_boot.h b/SECboot/sec_boot.h
--- a/SECboot/sec_boot.h	1970-01-01 08:00:00.000000000 +0800
+++ b/SECboot/sec_boot.h	2014-01-03 14:02:42.000000000 +0800
@@ -0,0 +1,42 @@
+#ifndef __ARC_BOOT_H
+#define __ARC_BOOT_H
+#pragma pack(1)
+
+#if !defined(u8) && !defined(u16) && !defined(u32)
+#define u8 	unsigned char
+#define u16	unsigned short
+#define u32	unsigned int
+#endif	// uchar, ushort, uint, ulong //
+
+#define IH_MAGIC	0x27051956	/* Image Magic Number		*/
+#define IH_NMLEN		32		/* Image Name Length		*/
+
+typedef struct mkimg_hdr {
+	u32		ih_magic;	/* Image Header Magic Number	*/
+	u32		ih_hcrc;	/* Image Header CRC Checksum	*/
+	u32		ih_time;	/* Image Creation Timestamp	*/
+	u32		ih_size;	/* Image Data Size		*/
+	u32		ih_load;	/* Data	 Load  Address		*/
+	u32		ih_ep;		/* Entry Point Address		*/
+	u32		ih_dcrc;	/* Image Data CRC Checksum	*/
+	u8		ih_os;		/* Operating System		*/
+	u8		ih_arch;	/* CPU architecture		*/
+	u8		ih_type;	/* Image Type			*/
+	u8		ih_comp;	/* Compression Type		*/
+	u8		ih_name[IH_NMLEN];	/* Image Name		*/
+}MKIMG_HDR, *PMKIMG_HDR;
+
+#define MKIMG_LEN			(sizeof(MKIMG_HDR))
+#define NAND_BLOCK_SIZE		(1<<7)
+#define ONE_K				(1<<10)
+#define ROLL_MAX			(NAND_BLOCK_SIZE*ONE_K)
+#define ROLL_MIN			(MKIMG_LEN)
+#define BRANCH2ARCBOOT(dst, argc, argv)			((u32 (*)(int, char *[]))dst)(argc, argv)
+
+int arc_img_dec(u8 *dec_data, u32 total, u32 *rnd);
+__inline__ void arc_read(u32 ram_addr, u8 *dst, u32 len);
+void *my_memset(void *s, int c, unsigned long n);
+void my_memcpy(void * dest, void *src, unsigned long n);
+
+#pragma pack()
+#endif	// __ARC_BOOT_H //
diff -Nur a/SECboot/stubs.c b/SECboot/stubs.c
--- a/SECboot/stubs.c	1970-01-01 08:00:00.000000000 +0800
+++ b/SECboot/stubs.c	2014-01-03 14:02:42.000000000 +0800
@@ -0,0 +1,208 @@
+#include <exports.h>
+
+#ifndef GCC_VERSION
+#define GCC_VERSION (__GNUC__ * 1000 + __GNUC_MINOR__)
+#endif /* GCC_VERSION */
+
+#if defined(CONFIG_I386)
+/*
+ * x86 does not have a dedicated register to store the pointer to
+ * the global_data. Thus the jump table address is stored in a
+ * global variable, but such approach does not allow for execution
+ * from flash memory. The global_data address is passed as argv[-1]
+ * to the application program.
+ */
+static void **jt;
+gd_t *global_data;
+
+#define EXPORT_FUNC(x) \
+	asm volatile (			\
+"	.globl " #x "\n"		\
+#x ":\n"				\
+"	movl	%0, %%eax\n"		\
+"	movl	jt, %%ecx\n"		\
+"	jmp	*(%%ecx, %%eax)\n"	\
+	: : "i"(XF_ ## x * sizeof(void *)) : "eax", "ecx");
+#elif defined(CONFIG_PPC)
+/*
+ * r2 holds the pointer to the global_data, r11 is a call-clobbered
+ * register
+ */
+#define EXPORT_FUNC(x) \
+	asm volatile (			\
+"	.globl " #x "\n"		\
+#x ":\n"				\
+"	lwz	%%r11, %0(%%r2)\n"	\
+"	lwz	%%r11, %1(%%r11)\n"	\
+"	mtctr	%%r11\n"		\
+"	bctr\n"				\
+	: : "i"(offsetof(gd_t, jt)), "i"(XF_ ## x * sizeof(void *)) : "r11");
+#elif defined(CONFIG_ARM)
+/*
+ * r8 holds the pointer to the global_data, ip is a call-clobbered
+ * register
+ */
+#define EXPORT_FUNC(x) \
+	asm volatile (			\
+"	.globl " #x "\n"		\
+#x ":\n"				\
+"	ldr	ip, [r8, %0]\n"		\
+"	ldr	pc, [ip, %1]\n"		\
+	: : "i"(offsetof(gd_t, jt)), "i"(XF_ ## x * sizeof(void *)) : "ip");
+#elif defined(CONFIG_MIPS)
+/*
+ * k0 ($26) holds the pointer to the global_data; t9 ($25) is a call-
+ * clobbered register that is also used to set gp ($26). Note that the
+ * jr instruction also executes the instruction immediately following
+ * it; however, GCC/mips generates an additional `nop' after each asm
+ * statement
+ */
+#define EXPORT_FUNC(x) \
+	asm volatile (			\
+"	.globl " #x "\n"		\
+#x ":\n"				\
+"	lw	$25, %0($26)\n"		\
+"	lw	$25, %1($25)\n"		\
+"	jr	$25\n"			\
+	: : "i"(offsetof(gd_t, jt)), "i"(XF_ ## x * sizeof(void *)) : "t9");
+#elif defined(CONFIG_NIOS2)
+/*
+ * gp holds the pointer to the global_data, r8 is call-clobbered
+ */
+#define EXPORT_FUNC(x) \
+	asm volatile (			\
+"	.globl " #x "\n"		\
+#x ":\n"				\
+"	movhi	r8, %%hi(%0)\n"		\
+"	ori	r8, r0, %%lo(%0)\n"	\
+"	add	r8, r8, gp\n"		\
+"	ldw	r8, 0(r8)\n"		\
+"	ldw	r8, %1(r8)\n"		\
+"	jmp	r8\n"			\
+	: : "i"(offsetof(gd_t, jt)), "i"(XF_ ## x * sizeof(void *)) : "gp");
+#elif defined(CONFIG_M68K)
+/*
+ * d7 holds the pointer to the global_data, a0 is a call-clobbered
+ * register
+ */
+#define EXPORT_FUNC(x) \
+	asm volatile (			\
+"	.globl " #x "\n"		\
+#x ":\n"				\
+"	move.l	%%d7, %%a0\n"		\
+"	adda.l	%0, %%a0\n"		\
+"	move.l	(%%a0), %%a0\n"		\
+"	adda.l	%1, %%a0\n"		\
+"	move.l	(%%a0), %%a0\n"		\
+"	jmp	(%%a0)\n"			\
+	: : "i"(offsetof(gd_t, jt)), "i"(XF_ ## x * sizeof(void *)) : "a0");
+#elif defined(CONFIG_MICROBLAZE)
+/*
+ * r31 holds the pointer to the global_data. r5 is a call-clobbered.
+ */
+#define EXPORT_FUNC(x)				\
+	asm volatile (				\
+"	.globl " #x "\n"			\
+#x ":\n"					\
+"	lwi	r5, r31, %0\n"			\
+"	lwi	r5, r5, %1\n"			\
+"	bra	r5\n"				\
+	: : "i"(offsetof(gd_t, jt)), "i"(XF_ ## x * sizeof(void *)) : "r5");
+#elif defined(CONFIG_BLACKFIN)
+/*
+ * P3 holds the pointer to the global_data, P0 is a call-clobbered
+ * register
+ */
+#define EXPORT_FUNC(x)			\
+	asm volatile (			\
+"	.globl _" #x "\n_"		\
+#x ":\n"				\
+"	P0 = [P3 + %0]\n"		\
+"	P0 = [P0 + %1]\n"		\
+"	JUMP (P0)\n"			\
+	: : "i"(offsetof(gd_t, jt)), "i"(XF_ ## x * sizeof(void *)) : "P0");
+#elif defined(CONFIG_AVR32)
+/*
+ * r6 holds the pointer to the global_data. r8 is call clobbered.
+ */
+#define EXPORT_FUNC(x)					\
+	asm volatile(					\
+		"	.globl\t" #x "\n"		\
+		#x ":\n"				\
+		"	ld.w	r8, r6[%0]\n"		\
+		"	ld.w	pc, r8[%1]\n"		\
+		:					\
+		: "i"(offsetof(gd_t, jt)), "i"(XF_ ##x)	\
+		: "r8");
+#elif defined(CONFIG_SH)
+/*
+ * r13 holds the pointer to the global_data. r1 is a call clobbered.
+ */
+#define EXPORT_FUNC(x)					\
+	asm volatile (					\
+		"	.align	2\n"			\
+		"	.globl " #x "\n"		\
+		#x ":\n"				\
+		"	mov	r13, r1\n"		\
+		"	add	%0, r1\n"		\
+		"	mov.l @r1, r2\n"	\
+		"	add	%1, r2\n"		\
+		"	mov.l @r2, r1\n"	\
+		"	jmp	@r1\n"			\
+		"	nop\n"				\
+		"	nop\n"				\
+		: : "i"(offsetof(gd_t, jt)), "i"(XF_ ## x * sizeof(void *)) : "r1", "r2");
+#elif defined(CONFIG_SPARC)
+/*
+ * g7 holds the pointer to the global_data. g1 is call clobbered.
+ */
+#define EXPORT_FUNC(x)					\
+	asm volatile(					\
+"	.globl\t" #x "\n"				\
+#x ":\n"						\
+"	set %0, %%g1\n"					\
+"	or %%g1, %%g7, %%g1\n"				\
+"	ld [%%g1], %%g1\n"				\
+"	ld [%%g1 + %1], %%g1\n"				\
+"	jmp %%g1\n"					\
+"	nop\n"						\
+	: : "i"(offsetof(gd_t, jt)), "i"(XF_ ## x * sizeof(void *)) : "g1" );
+
+#else
+#error stubs definition missing for this architecture
+#endif
+
+/* This function is necessary to prevent the compiler from
+ * generating prologue/epilogue, preparing stack frame etc.
+ * The stub functions are special, they do not use the stack
+ * frame passed to them, but pass it intact to the actual
+ * implementation. On the other hand, asm() statements with
+ * arguments can be used only inside the functions (gcc limitation)
+ */
+#if GCC_VERSION < 3004
+static
+#endif /* GCC_VERSION */
+void __attribute__((unused)) dummy(void)
+{
+#include <_exports.h>
+}
+
+extern unsigned long __bss_start, _end;
+
+void app_startup(char **argv)
+{
+	unsigned char * cp = (unsigned char *) &__bss_start;
+
+	/* Zero out BSS */
+	while (cp < (unsigned char *)&_end) {
+		*cp++ = 0;
+	}
+
+#if defined(CONFIG_I386)
+	/* x86 does not have a dedicated register for passing global_data */
+	global_data = (gd_t *)argv[-1];
+	jt = global_data->jt;
+#endif
+}
+
+#undef EXPORT_FUNC
diff -Nur a/SECboot/xor_cipher.c b/SECboot/xor_cipher.c
--- a/SECboot/xor_cipher.c	1970-01-01 08:00:00.000000000 +0800
+++ b/SECboot/xor_cipher.c	2014-01-03 14:02:42.000000000 +0800
@@ -0,0 +1,110 @@
+#include <common.h>
+#include <exports.h>
+#include "sec_boot.h"
+
+__inline__ void arc_dec(u8 *s1, u8 *s2, u32 len){
+	u32 cnt = len;
+	while(cnt--) *s1++ ^= *s2++;
+}
+
+
+void *my_memset(void *s, int c, unsigned long n)
+{
+	unsigned long  i;
+	char *ss = (char *)s;
+
+	for (i = 0; i < n; i++) ss[i] = (int)c;
+	return s;
+}
+
+void my_memcpy(void *dest, void *src, unsigned long n)
+{
+	unsigned long  i;
+	long *Dest = (long *) dest;
+	long *Src = (long *) src;
+
+	for (i = 0; i < (n>>2); i++) {
+		Dest[i] = Src[i];
+	}
+}
+
+int arc_img_dec(u8 *dec_data, u32 total, u32 *rnd){
+
+	u32	key_blk 	= 0;
+	u32	nxt			= 0;
+	u32	end_blk 	= 0;
+
+	u32	dec_odr		= 0;
+	u32 offset		= 0;
+	u32	dec_offset	= 0;
+	u32	blk_size 	= 0;
+	u32	key_start 	= 0;
+	u32	end_start	= 0;
+
+	u32	idv			= 0;
+	u32	cmn			= 0;
+	
+	printf("<%30s:%5d>: data = %x \n", __func__, __LINE__, dec_data);
+
+	if(rnd){
+		idv = *rnd;
+		idv %= 10;
+		if(idv <= 1)	idv += 2;
+	}
+	printf("<%30s:%5d>:\n", __func__, __LINE__);
+	
+blk_loop:	
+	for(end_blk = ROLL_MAX; end_blk >= ROLL_MIN; end_blk--){
+		if(!(total%end_blk)){
+			if((rnd) && (++cmn!=idv))	continue;
+			blk_size = total / end_blk;
+
+			if(rnd){
+				if(idv&0x01)		key_blk = (((end_blk>>1)+(end_blk>>idv))>end_blk)?end_blk>>1:((end_blk>>1)+(end_blk>>idv));
+				else				key_blk = ((end_blk>>idv)>idv)?(end_blk>>idv):(end_blk>>2);
+				if(end_blk&0x01)	key_blk -= (key_blk>>2)+(((key_blk>>4)>idv)?((key_blk>>3)+idv):(idv>>1));
+				else				key_blk += (key_blk>>1)-(((key_blk>>3)>idv)?((key_blk>>2)-idv):(idv>>1));							
+			}else
+				key_blk = end_blk >> 1;
+			key_start = blk_size * key_blk;
+
+			end_start = blk_size * (end_blk-1);
+			break;
+		}
+	}
+	printf("<%30s:%5d>:\n", __func__, __LINE__);
+	if(!key_blk || !blk_size ){
+		printf("<%30s:%5d>:\n", __func__, __LINE__);
+		idv = cmn;
+		cmn = 0;
+		goto blk_loop;
+	}
+	
+	printf("<%30s:%5d>:\n", __func__, __LINE__);
+
+	offset = key_start;
+	dec_offset = blk_size;
+	arc_dec(dec_data+offset, dec_data+dec_offset, blk_size);
+
+	printf("<%30s:%5d>:\n", __func__, __LINE__);
+	
+	
+	for(dec_odr=1; dec_odr < end_blk; dec_odr++){
+		offset = dec_offset;
+		nxt = dec_odr+1;
+		dec_offset = blk_size*nxt;
+		if(dec_offset == key_start){
+			dec_offset += blk_size;
+			dec_odr++;
+		}else if(offset == end_start){
+			dec_offset = 0;
+		}
+		arc_dec(dec_data+offset, dec_data+dec_offset, blk_size);
+	}
+	
+	printf("<%30s:%5d>:\n", __func__, __LINE__);
+
+	arc_dec(dec_data, dec_data+key_start, blk_size);
+
+	return 0;
+}
