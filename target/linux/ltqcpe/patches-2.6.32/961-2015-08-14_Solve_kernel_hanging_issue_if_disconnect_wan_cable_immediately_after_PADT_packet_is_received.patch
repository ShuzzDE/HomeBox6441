diff --git a/drivers/net/pppoe.c b/drivers/net/pppoe.c
index 878a583..45a5b45 100644
--- a/drivers/net/pppoe.c
+++ b/drivers/net/pppoe.c
@@ -327,7 +327,9 @@ static void pppoe_flush_dev(struct net_device *dev)
 			if (po->pppoe_dev == dev
 			    && sk->sk_state & (PPPOX_CONNECTED | PPPOX_BOUND)) {
 				pppox_unbind_sock(sk);
-				sk->sk_state = PPPOX_ZOMBIE;
+				/*Zhijian 2015-08-14 To solve kernel hanging issue
+				if disconnect wan cable immediately after 'PADT' packet is received.*/
+				sk->sk_state |= PPPOX_ZOMBIE;
 				sk->sk_state_change(sk);
 				po->pppoe_dev = NULL;
 				dev_put(dev);
@@ -344,6 +346,9 @@ static void pppoe_flush_dev(struct net_device *dev)
 			BUG_ON(pppoe_pernet(dev_net(dev)) == NULL);
 			write_lock_bh(&pn->hash_lock);
 			po = pn->hash_table[i];
+			/*Zhijian 2015-08-14 We also can make the pointer po point to its next
+			to solve dead loop issue.*/
+			//po = po->next;
 		}
 	}
 	write_unlock_bh(&pn->hash_lock);
@@ -509,7 +514,9 @@ static int pppoe_disc_rcv(struct sk_buff *skb, struct net_device *dev,
 			/* We're no longer connect at the PPPOE layer,
 			 * and must wait for ppp channel to disconnect us.
 			 */
-			sk->sk_state = PPPOX_ZOMBIE;
+			/*Zhijian 2015-08-14 To solve kernel hanging issue
+			if disconnect wan cable immediately after 'PADT' packet is received.*/
+			sk->sk_state |= PPPOX_ZOMBIE;
 		}
 
 		bh_unlock_sock(sk);
