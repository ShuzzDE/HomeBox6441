Index: linux-2.6.32.42/drivers/net/ppp_generic.c
===================================================================
--- linux-2.6.32.42.orig/drivers/net/ppp_generic.c	2013-08-13 13:39:19.000000000 +0530
+++ linux-2.6.32.42/drivers/net/ppp_generic.c	2013-08-13 13:52:55.000000000 +0530
@@ -2921,6 +2921,16 @@
 
 #if (defined(CONFIG_IFX_PPA_API) || defined(CONFIG_IFX_PPA_API_MODULE))
 
+#if (defined(CONFIG_PPPOL2TP) || defined(CONFIG_PPPOL2TP_MODULE))
+enum{
+PPPOL2TP_GET_SESSION_ID=1,
+PPPOL2TP_GET_TUNNEL_ID,
+PPPOL2TP_GET_BASEIF,
+PPPOL2TP_GET_ADDR,
+PPPOL2TP_GET_DMAC,
+};
+#endif
+
 #if (defined(CONFIG_PPPOE) || defined(CONFIG_PPPOE_MODULE))
 extern int32_t ppa_get_pppoe_info(struct net_device *dev, void *po, uint32_t pppoe_id, void *value);
 #endif
@@ -2929,6 +2939,10 @@
 extern int32_t ppa_get_pppoa_info(struct net_device *dev, void *pvcc, uint32_t pppoa_id, void *value);
 #endif
 
+#if (defined(CONFIG_PPPOL2TP) || defined(CONFIG_PPPOL2TP_MODULE))
+extern int32_t ppa_get_pppol2tp_info(struct net_device *dev, void *po, uint32_t pppol2tp_id, void *value);
+#endif
+
 /*it's very unlikely we need lock_kernel here to prevent the device being destroyed*/
 int32_t ppa_ppp_get_info(struct net_device *ppp_dev, uint32_t ppp_info_id, void *value)
 {
@@ -2987,6 +3001,17 @@
 #if (defined(CONFIG_PPPOE) || defined(CONFIG_PPPOE_MODULE))
 		ret = ppa_get_pppoe_info(ppp_dev, pch->chan->private, ppp_info_id >>PPA_PPP_MASK_LEN, value);
 #endif
+	}else if((ppp_info_id & PPA_PPP_MASK) == PPA_PPPOL2TP_ID){
+#if (defined(CONFIG_PPPOL2TP) || defined(CONFIG_PPPOL2TP_MODULE))
+		if((ppp_info_id >>PPA_PPP_MASK_LEN) == PPPOL2TP_GET_DMAC)
+		{
+			ret = ppa_get_pppol2tp_info(ppp_dev, pch->chan->private, ppp_info_id >>PPA_PPP_MASK_LEN, (uint8_t *)value);
+		}
+		else
+		{
+			ret = ppa_get_pppol2tp_info(ppp_dev, pch->chan->private, ppp_info_id >>PPA_PPP_MASK_LEN, value);
+		}
+#endif
 	}else{
 #if (defined(CONFIG_PPPOATM) || defined(CONFIG_PPPOATM_MODULE))
 		ret = ppa_get_pppoa_info(ppp_dev, pch->chan->private, ppp_info_id >>PPA_PPP_MASK_LEN, value);
Index: linux-2.6.32.42/drivers/net/pppol2tp.c
===================================================================
--- linux-2.6.32.42.orig/drivers/net/pppol2tp.c	2011-06-24 03:54:26.000000000 +0530
+++ linux-2.6.32.42/drivers/net/pppol2tp.c	2013-08-13 13:51:04.000000000 +0530
@@ -97,6 +97,7 @@
 #include <net/ip.h>
 #include <net/udp.h>
 #include <net/xfrm.h>
+#include <net/flow.h>
 
 #include <asm/byteorder.h>
 #include <asm/atomic.h>
@@ -2688,6 +2689,273 @@
 	proto_unregister(&pppol2tp_sk_proto);
 }
 
+#if (defined(CONFIG_IFX_PPA_API) || defined(CONFIG_IFX_PPA_API_MODULE))
+
+enum{
+PPPOL2TP_GET_SESSION_ID=1,
+PPPOL2TP_GET_TUNNEL_ID,
+PPPOL2TP_GET_BASEIF,
+PPPOL2TP_GET_ADDR,
+PPPOL2TP_GET_DMAC,
+PPPOL2TP_GET_SADDR,
+PPPOL2TP_GET_DADDR,
+};
+
+__u16 ppa_pppol2tp_get_l2tp_session_id(struct net_device *dev)
+{
+	uint16_t seid=0;
+	uint32_t id = (PPPOL2TP_GET_SESSION_ID << PPA_PPP_MASK_LEN) | PPA_PPPOL2TP_ID;
+	
+	ppa_ppp_get_info(dev, id, &seid);
+	
+	return seid;
+}
+
+__u16 ppa_pppol2tp_get_l2tp_tunnel_id(struct net_device *dev)
+{
+	uint16_t tuid=0;
+	uint32_t id = (PPPOL2TP_GET_TUNNEL_ID << PPA_PPP_MASK_LEN) | PPA_PPPOL2TP_ID;
+	
+	ppa_ppp_get_info(dev, id, &tuid);
+	
+	return tuid;
+}
+
+int32_t ppa_pppol2tp_get_base_netif(struct net_device *dev, char pppol2tp_eth_ifname[IFNAMSIZ])
+{
+	uint32_t id = (PPPOL2TP_GET_BASEIF << PPA_PPP_MASK_LEN) | PPA_PPPOL2TP_ID;
+
+	return ppa_ppp_get_info(dev, id, pppol2tp_eth_ifname);
+}
+
+int32_t ppa_pppol2tp_get_l2tp_addr(struct net_device *dev, struct pppol2tp_addr *pa)
+{
+	uint32_t id = (PPPOL2TP_GET_ADDR << PPA_PPP_MASK_LEN) | PPA_PPPOL2TP_ID;
+	return ppa_ppp_get_info(dev, id, pa);
+}
+
+int32_t ppa_pppol2tp_get_l2tp_dmac(struct net_device *dev, uint8_t *mac)
+{
+	uint32_t id = (PPPOL2TP_GET_DMAC << PPA_PPP_MASK_LEN) | PPA_PPPOL2TP_ID;
+	return ppa_ppp_get_info(dev, id, mac);
+}
+int32_t ppa_pppol2tp_get_src_addr(struct net_device *dev, uint32_t *outer_srcip)
+{
+	uint32_t id = (PPPOL2TP_GET_SADDR << PPA_PPP_MASK_LEN) | PPA_PPPOL2TP_ID;
+	return ppa_ppp_get_info(dev, id, outer_srcip);
+}
+int32_t ppa_pppol2tp_get_dst_addr(struct net_device *dev, uint32_t *outer_dstip)
+{
+	uint32_t id = (PPPOL2TP_GET_DADDR << PPA_PPP_MASK_LEN) | PPA_PPPOL2TP_ID;
+	return ppa_ppp_get_info(dev, id, outer_dstip);
+}
+
+void ppa_pppol2tp_get_saddr( struct net_device *dev, struct sock *sk_tun, uint32_t *outer_srcip )
+{
+	struct inet_sock *inet;
+	struct pppol2tp_tunnel *tunnel;
+	uint32_t src_ip;
+	
+	inet = inet_sk(sk_tun);
+	src_ip = inet->saddr;
+	
+	*outer_srcip = src_ip;
+}
+
+void ppa_pppol2tp_get_daddr( struct net_device *dev, struct sock *sk_tun, uint32_t *outer_dstip )
+{
+	struct inet_sock *inet;
+	struct pppol2tp_tunnel *tunnel;
+	uint32_t dst_ip;
+	
+	inet = inet_sk(sk_tun);
+	dst_ip = inet->daddr;
+	
+	*outer_dstip = dst_ip;
+}
+
+void ppa_pppol2tp_get_eth( struct net_device *dev, struct sock *sk_tun, void *devname)
+{
+	struct rtable *rt = NULL;
+	struct dst_entry *dst = NULL;
+	struct iphdr *iph;
+	struct sock *sk;
+	struct inet_sock *inet;
+	struct pppol2tp_tunnel *tunnel;
+	struct net_device *phydev = NULL;
+	
+	tunnel = pppol2tp_sock_to_tunnel(sk_tun);
+	inet = inet_sk(sk_tun);
+	
+	if (inet->daddr) {
+		struct flowi fl = { .nl_u = { .ip4_u =
+					      { .daddr = inet->daddr,
+						.saddr = inet->saddr,
+						.tos = RT_TOS(inet->tos) } },
+				    .oif = sk_tun->sk_bound_dev_if,
+				    .proto = sk_tun->sk_protocol };
+		struct rtable *rt;
+		if (!ip_route_output_key(dev_net(dev), &rt, &fl)) {
+			phydev = rt->u.dst.dev;
+		memcpy(devname, (phydev->name), sizeof(phydev->name));
+		}
+	}
+}
+
+int32_t ppa_pppol2tp_get_dmac( struct net_device *dev, struct sock *sk_tun, uint8_t *mac)
+{
+
+	struct rtable *rt = NULL;
+	struct dst_entry *dst = NULL;
+	struct iphdr *iph;
+	struct sock *sk;
+	struct inet_sock *inet;
+	struct hh_cache *hh;
+	struct pppol2tp_tunnel *tunnel;
+	uint8_t i;
+
+	tunnel = pppol2tp_sock_to_tunnel(sk_tun);
+	inet = inet_sk(sk_tun);
+	dst = sk_tun->sk_dst_cache;
+	rt = (struct rtable *)__sk_dst_check(sk_tun, 0);
+	if ( rt == NULL )
+	{
+		if ( inet->daddr ) {
+	
+			struct flowi f1 = { .nl_u = { .ip4_u = 
+							{ .daddr = inet->daddr,
+							  .saddr = inet->saddr,
+							  .tos = RT_TOS(inet->tos),
+							}
+						    },
+					    .proto = sk_tun->sk_protocol,
+					    .flags = inet_sk_flowi_flags(sk_tun),
+					    .oif = sk_tun->sk_bound_dev_if };
+		
+			if (!ip_route_output_key(dev_net(dev), &rt, &f1))
+			{
+				dst = &rt->u.dst;
+			}
+		}
+	}
+	dst = &rt->u.dst;
+	if(!dst)
+	{
+		goto MAC_ERROR;
+	}
+	hh = dst->hh;
+	if(!hh){
+	   if ( dst->neighbour
+	            && (dst->neighbour->ha[0] != 0
+	            || dst->neighbour->ha[1] != 0
+	            || dst->neighbour->ha[2] != 0
+	            || dst->neighbour->ha[3] != 0
+	            || dst->neighbour->ha[4] != 0
+	            || dst->neighbour->ha[5] != 0) ){
+	         memcpy(mac, (uint8_t *)(dst->neighbour->ha), ETH_ALEN);
+	    }else{
+	        goto MAC_ERROR;
+	    }
+	}else{
+	     unsigned int seq;
+	     do {
+	        seq = read_seqbegin(&hh->hh_lock);
+	        if ( hh->hh_len != ETH_HLEN )
+	        {
+	            //printk("head length is not correct: hh->hh_len = %d, ETH_HLEN = %d\n", (int)hh->hh_len, ETH_HLEN);
+	            goto MAC_ERROR;
+	        }
+	        else
+	        {
+	            memcpy(mac, (uint8_t *)hh->hh_data + HH_DATA_ALIGN(hh->hh_len) - hh->hh_len, ETH_ALEN);
+	        }
+	    } while ( read_seqretry(&hh->hh_lock, seq) );
+	}
+	
+	return 0;
+
+MAC_ERROR:
+
+return -1;
+
+}
+
+int32_t ppa_get_pppol2tp_info(struct net_device *dev, void *po, uint32_t pppol2tp_id, void *value)
+{
+	struct pppol2tp_addr pa;
+	struct pppol2tp_session *session;
+	struct pppol2tp_tunnel *tunnel;
+	char devname[IFNAMSIZ];
+	struct net_device *pppol2tp_dev;
+	struct sock *sk_tun;
+	int32_t ret = 0;	
+
+	if(!po)
+	{
+		printk("No pppol2tp sock \n");
+		return -1;
+	}
+
+	struct sock *sk = (struct sock *)po;
+
+	session = pppol2tp_sock_to_session(sk);
+	if(!session)
+	{
+		printk("No pppol2tp sock \n");
+		return -1;
+	}
+	sk_tun = session->tunnel_sock;
+	tunnel = pppol2tp_sock_to_tunnel(sk_tun);
+	if(!tunnel)
+	{
+		printk("No pppol2tp sock \n");
+		return -1;
+	}
+
+	pa = (session->tunnel_addr);
+	
+	if(pppol2tp_dev = dev_get_by_name(dev_net(dev),devname))
+	dev_put(pppol2tp_dev);
+	
+	switch(pppol2tp_id){
+	case PPPOL2TP_GET_SESSION_ID:
+		*(u_int16_t *)value = pa.d_session;
+			break;
+	case PPPOL2TP_GET_TUNNEL_ID:
+		*(u_int16_t *)value = pa.d_tunnel;
+			break;
+	case PPPOL2TP_GET_ADDR:
+		*(struct pppol2tp_addr *)value = pa;
+			break;
+	case PPPOL2TP_GET_BASEIF:
+		ppa_pppol2tp_get_eth(dev,sk_tun,value);
+			break;
+	case PPPOL2TP_GET_DMAC:
+		ret = ppa_pppol2tp_get_dmac(dev,sk_tun,(uint8_t *)value);
+			break;
+	case PPPOL2TP_GET_SADDR:
+		ppa_pppol2tp_get_saddr(dev,sk_tun,(uint32_t *)value);
+			break;
+	case PPPOL2TP_GET_DADDR:
+		ppa_pppol2tp_get_daddr(dev,sk_tun,(uint32_t *)value);
+			break;
+	default:
+		return -1;
+	}
+	
+	return 0;
+}
+
+EXPORT_SYMBOL(ppa_pppol2tp_get_l2tp_session_id);
+EXPORT_SYMBOL(ppa_pppol2tp_get_l2tp_tunnel_id);
+EXPORT_SYMBOL(ppa_pppol2tp_get_base_netif);
+EXPORT_SYMBOL(ppa_pppol2tp_get_l2tp_addr);
+EXPORT_SYMBOL(ppa_pppol2tp_get_l2tp_dmac);
+EXPORT_SYMBOL(ppa_pppol2tp_get_src_addr);
+EXPORT_SYMBOL(ppa_pppol2tp_get_dst_addr);
+EXPORT_SYMBOL(ppa_get_pppol2tp_info);
+#endif
+
 module_init(pppol2tp_init);
 module_exit(pppol2tp_exit);
 
Index: linux-2.6.32.42/include/linux/if_ppp.h
===================================================================
--- linux-2.6.32.42.orig/include/linux/if_ppp.h	2013-08-13 13:39:19.000000000 +0530
+++ linux-2.6.32.42/include/linux/if_ppp.h	2013-08-13 13:53:23.000000000 +0530
@@ -175,6 +175,7 @@
 #define PPA_PPP_MASK		3
 #define PPA_PPPOE_ID 		0x00000001
 #define PPA_PPPOA_ID		0x00000002
+#define PPA_PPPOL2TP_ID		0x00000003
 #endif
 
 #endif /* _IF_PPP_H_ */
Index: linux-2.6.32.42/drivers/net/pppoe.c
===================================================================
--- linux-2.6.32.42.orig/drivers/net/pppoe.c	2013-08-13 13:39:19.000000000 +0530
+++ linux-2.6.32.42/drivers/net/pppoe.c	2013-08-20 19:39:23.000000000 +0530
@@ -1239,13 +1239,16 @@
 {
 	struct pppox_sock *po=NULL;
 	struct pppoe_net *pn;
-    struct net_device *pppoe_netdev;
+        struct net_device *pppoe_netdev;
 	int32_t ret = -EFAULT;
 
-    pn = pppoe_pernet(dev_net(dev));
-    if (pppoe_netdev = dev_get_by_name(dev_net(dev), pa->dev)) {
+	if((pa->dev == NULL) || (pa->remote == NULL) || (pa->sid == NULL))
+	return ret;
+
+        pn = pppoe_pernet(dev_net(dev));
+        if (pppoe_netdev = dev_get_by_name(dev_net(dev), pa->dev)) {
 	    dev_put (pppoe_netdev);
-    }
+        }
 	po = get_item(pn, pa->sid, pa->remote, pppoe_netdev->ifindex);
 	if (!po){
 		printk("Cannot find the pppoe addr in hash table \n");
