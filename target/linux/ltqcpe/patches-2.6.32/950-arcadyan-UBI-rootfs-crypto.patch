From 7622664ab63f12ee8a9b1c8ca5ed3e57cd262832 Mon Sep 17 00:00:00 2001
From: Terry Lin <terry_lin@arcadyan.com.tw>
Date: Mon, 9 Dec 2013 15:10:40 +0800
Subject: [PATCH] Add UBI rootfs crypto.

---
 crypto/Makefile             |   2 +-
 crypto/simple_aes.c         | 564 ++++++++++++++++++++++++++++++++++++++++++++
 fs/ubifs/Kconfig            |   9 +
 fs/ubifs/compress.c         | 117 +++++++++
 fs/ubifs/super.c            |  12 +
 include/crypto/simple_aes.h | 178 ++++++++++++++
 6 files changed, 881 insertions(+), 1 deletion(-)
 create mode 100644 crypto/simple_aes.c
 create mode 100644 include/crypto/simple_aes.h

diff --git a/crypto/Makefile b/crypto/Makefile
index 507c732..22c89ca 100644
--- a/crypto/Makefile
+++ b/crypto/Makefile
@@ -63,7 +63,7 @@ obj-$(CONFIG_CRYPTO_BLOWFISH) += blowfish.o
 obj-$(CONFIG_CRYPTO_TWOFISH) += twofish.o
 obj-$(CONFIG_CRYPTO_TWOFISH_COMMON) += twofish_common.o
 obj-$(CONFIG_CRYPTO_SERPENT) += serpent.o
-obj-$(CONFIG_CRYPTO_AES) += aes_generic.o
+obj-$(CONFIG_CRYPTO_AES) += aes_generic.o simple_aes.o
 obj-$(CONFIG_CRYPTO_CAMELLIA) += camellia.o
 obj-$(CONFIG_CRYPTO_CAST5) += cast5.o
 obj-$(CONFIG_CRYPTO_CAST6) += cast6.o
diff --git a/crypto/simple_aes.c b/crypto/simple_aes.c
new file mode 100644
index 0000000..2fd5872
--- /dev/null
+++ b/crypto/simple_aes.c
@@ -0,0 +1,564 @@
+/*
+ *  FIPS-197 compliant AES implementation
+ *
+ *  Copyright (C) 2011, Con Kolivas <kernel@kolivas.org>
+ *  Copyright (C) 2006-2010, Brainspark B.V.
+ *
+ *  This file is part of PolarSSL (http://www.polarssl.org)
+ *  Lead Maintainer: Paul Bakker <polarssl_maintainer at polarssl.org>
+ *
+ *  All rights reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with this program; if not, write to the Free Software Foundation, Inc.,
+ *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+/*
+ *  The AES block cipher was designed by Vincent Rijmen and Joan Daemen.
+ *
+ *  http://csrc.nist.gov/encryption/aes/rijndael/Rijndael.pdf
+ *  http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf
+ */
+ 
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <linux/crypto.h>
+#include <crypto/simple_aes.h>
+
+/*
+ * 32-bit integer manipulation macros (little endian)
+ */
+#ifndef SIMPLE_AES_GET_ULONG_LE
+#define SIMPLE_AES_GET_ULONG_LE(n,b,i)                             \
+{                                                       \
+    (n) = ( (unsigned long) (b)[(i)    ]       )        \
+        | ( (unsigned long) (b)[(i) + 1] <<  8 )        \
+        | ( (unsigned long) (b)[(i) + 2] << 16 )        \
+        | ( (unsigned long) (b)[(i) + 3] << 24 );       \
+}
+#endif
+
+#ifndef SIMPLE_AES_PUT_ULONG_LE
+#define SIMPLE_AES_PUT_ULONG_LE(n,b,i)                             \
+{                                                       \
+    (b)[(i)    ] = (unsigned char) ( (n)       );       \
+    (b)[(i) + 1] = (unsigned char) ( (n) >>  8 );       \
+    (b)[(i) + 2] = (unsigned char) ( (n) >> 16 );       \
+    (b)[(i) + 3] = (unsigned char) ( (n) >> 24 );       \
+}
+#endif
+
+/*
+ * Forward S-box & tables
+ */
+static unsigned char FSb[256];
+static unsigned long FT0[256];
+static unsigned long FT1[256];
+static unsigned long FT2[256];
+static unsigned long FT3[256];
+
+/*
+ * Reverse S-box & tables
+ */
+static unsigned char RSb[256];
+static unsigned long RT0[256];
+static unsigned long RT1[256];
+static unsigned long RT2[256];
+static unsigned long RT3[256];
+
+/*
+ * Round constants
+ */
+static unsigned long RCON[10];
+
+/*
+ * Tables generation code
+ */
+#define SIMPLE_AES_ROTL8(x) ( ( x << 8 ) & 0xFFFFFFFF ) | ( x >> 24 )
+#define SIMPLE_AES_XTIME(x) ( ( x << 1 ) ^ ( ( x & 0x80 ) ? 0x1B : 0x00 ) )
+#define SIMPLE_AES_MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )
+
+static int aes_init_done = 0;
+
+static void simple_aes_gen_tables( void )
+{
+    int i, x, y, z;
+    int pow[256];
+    int log[256];
+
+    /*
+     * compute pow and log tables over GF(2^8)
+     */
+    for( i = 0, x = 1; i < 256; i++ )
+    {
+        pow[i] = x;
+        log[x] = i;
+        x = ( x ^ SIMPLE_AES_XTIME( x ) ) & 0xFF;
+    }
+
+    /*
+     * calculate the round constants
+     */
+    for( i = 0, x = 1; i < 10; i++ )
+    {
+        RCON[i] = (unsigned long) x;
+        x = SIMPLE_AES_XTIME( x ) & 0xFF;
+    }
+
+    /*
+     * generate the forward and reverse S-boxes
+     */
+    FSb[0x00] = 0x63;
+    RSb[0x63] = 0x00;
+
+    for( i = 1; i < 256; i++ )
+    {
+        x = pow[255 - log[i]];
+
+        y  = x; y = ( (y << 1) | (y >> 7) ) & 0xFF;
+        x ^= y; y = ( (y << 1) | (y >> 7) ) & 0xFF;
+        x ^= y; y = ( (y << 1) | (y >> 7) ) & 0xFF;
+        x ^= y; y = ( (y << 1) | (y >> 7) ) & 0xFF;
+        x ^= y ^ 0x63;
+
+        FSb[i] = (unsigned char) x;
+        RSb[x] = (unsigned char) i;
+    }
+
+    /*
+     * generate the forward and reverse tables
+     */
+    for( i = 0; i < 256; i++ )
+    {
+        x = FSb[i];
+        y = SIMPLE_AES_XTIME( x ) & 0xFF;
+        z =  ( y ^ x ) & 0xFF;
+
+        FT0[i] = ( (unsigned long) y       ) ^
+                 ( (unsigned long) x <<  8 ) ^
+                 ( (unsigned long) x << 16 ) ^
+                 ( (unsigned long) z << 24 );
+
+        FT1[i] = SIMPLE_AES_ROTL8( FT0[i] );
+        FT2[i] = SIMPLE_AES_ROTL8( FT1[i] );
+        FT3[i] = SIMPLE_AES_ROTL8( FT2[i] );
+
+        x = RSb[i];
+
+        RT0[i] = ( (unsigned long) SIMPLE_AES_MUL( 0x0E, x )       ) ^
+                 ( (unsigned long) SIMPLE_AES_MUL( 0x09, x ) <<  8 ) ^
+                 ( (unsigned long) SIMPLE_AES_MUL( 0x0D, x ) << 16 ) ^
+                 ( (unsigned long) SIMPLE_AES_MUL( 0x0B, x ) << 24 );
+
+        RT1[i] = SIMPLE_AES_ROTL8( RT0[i] );
+        RT2[i] = SIMPLE_AES_ROTL8( RT1[i] );
+        RT3[i] = SIMPLE_AES_ROTL8( RT2[i] );
+    }
+}
+
+/*
+ * AES key schedule (encryption)
+ */
+int simple_aes_setkey_enc( simple_aes_context *ctx, const unsigned char *key, int keysize )
+{
+    int i;
+    unsigned long *RK;
+
+    if( aes_init_done == 0 )
+    {
+        simple_aes_gen_tables();
+        aes_init_done = 1;
+    }
+
+    switch( keysize )
+    {
+        case 128: ctx->nr = 10; break;
+        case 192: ctx->nr = 12; break;
+        case 256: ctx->nr = 14; break;
+        default : return( SIMPLE_AES_INVALID_KEY_LENGTH );
+    }
+
+    ctx->rk = RK = ctx->buf;
+
+    for( i = 0; i < (keysize >> 5); i++ )
+    {
+        SIMPLE_AES_GET_ULONG_LE( RK[i], key, i << 2 );
+    }
+
+    switch( ctx->nr )
+    {
+        case 10:
+
+            for( i = 0; i < 10; i++, RK += 4 )
+            {
+                RK[4]  = RK[0] ^ RCON[i] ^
+                ( (unsigned long) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
+                ( (unsigned long) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
+                ( (unsigned long) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
+                ( (unsigned long) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
+
+                RK[5]  = RK[1] ^ RK[4];
+                RK[6]  = RK[2] ^ RK[5];
+                RK[7]  = RK[3] ^ RK[6];
+            }
+            break;
+
+        case 12:
+
+            for( i = 0; i < 8; i++, RK += 6 )
+            {
+                RK[6]  = RK[0] ^ RCON[i] ^
+                ( (unsigned long) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
+                ( (unsigned long) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
+                ( (unsigned long) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
+                ( (unsigned long) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
+
+                RK[7]  = RK[1] ^ RK[6];
+                RK[8]  = RK[2] ^ RK[7];
+                RK[9]  = RK[3] ^ RK[8];
+                RK[10] = RK[4] ^ RK[9];
+                RK[11] = RK[5] ^ RK[10];
+            }
+            break;
+
+        case 14:
+
+            for( i = 0; i < 7; i++, RK += 8 )
+            {
+                RK[8]  = RK[0] ^ RCON[i] ^
+                ( (unsigned long) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
+                ( (unsigned long) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
+                ( (unsigned long) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
+                ( (unsigned long) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
+
+                RK[9]  = RK[1] ^ RK[8];
+                RK[10] = RK[2] ^ RK[9];
+                RK[11] = RK[3] ^ RK[10];
+
+                RK[12] = RK[4] ^
+                ( (unsigned long) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
+                ( (unsigned long) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
+                ( (unsigned long) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
+                ( (unsigned long) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
+
+                RK[13] = RK[5] ^ RK[12];
+                RK[14] = RK[6] ^ RK[13];
+                RK[15] = RK[7] ^ RK[14];
+            }
+            break;
+
+        default:
+
+            break;
+    }
+
+    return( 0 );
+}
+EXPORT_SYMBOL(simple_aes_setkey_enc);
+
+/*
+ * AES key schedule (decryption)
+ */
+int simple_aes_setkey_dec( simple_aes_context *ctx, const unsigned char *key, int keysize )
+{
+    int i, j;
+    simple_aes_context cty;
+    unsigned long *RK;
+    unsigned long *SK;
+    int ret;
+
+    switch( keysize )
+    {
+        case 128: ctx->nr = 10; break;
+        case 192: ctx->nr = 12; break;
+        case 256: ctx->nr = 14; break;
+        default : return( SIMPLE_AES_INVALID_KEY_LENGTH );
+    }
+
+    ctx->rk = RK = ctx->buf;
+
+    ret = simple_aes_setkey_enc( &cty, key, keysize );
+    if( ret != 0 )
+        return( ret );
+
+    SK = cty.rk + cty.nr * 4;
+
+    *RK++ = *SK++;
+    *RK++ = *SK++;
+    *RK++ = *SK++;
+    *RK++ = *SK++;
+
+    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
+    {
+        for( j = 0; j < 4; j++, SK++ )
+        {
+            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
+                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
+                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
+                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
+        }
+    }
+
+    *RK++ = *SK++;
+    *RK++ = *SK++;
+    *RK++ = *SK++;
+    *RK++ = *SK++;
+
+    memset( &cty, 0, sizeof( simple_aes_context ) );
+
+    return( 0 );
+}
+EXPORT_SYMBOL(simple_aes_setkey_dec);
+
+#define SIMPLE_AES_FROUND(X0,X1,X2,X3,Y0,Y1,Y2,Y3)     \
+{                                               \
+    X0 = *RK++ ^ FT0[ ( Y0       ) & 0xFF ] ^   \
+                 FT1[ ( Y1 >>  8 ) & 0xFF ] ^   \
+                 FT2[ ( Y2 >> 16 ) & 0xFF ] ^   \
+                 FT3[ ( Y3 >> 24 ) & 0xFF ];    \
+                                                \
+    X1 = *RK++ ^ FT0[ ( Y1       ) & 0xFF ] ^   \
+                 FT1[ ( Y2 >>  8 ) & 0xFF ] ^   \
+                 FT2[ ( Y3 >> 16 ) & 0xFF ] ^   \
+                 FT3[ ( Y0 >> 24 ) & 0xFF ];    \
+                                                \
+    X2 = *RK++ ^ FT0[ ( Y2       ) & 0xFF ] ^   \
+                 FT1[ ( Y3 >>  8 ) & 0xFF ] ^   \
+                 FT2[ ( Y0 >> 16 ) & 0xFF ] ^   \
+                 FT3[ ( Y1 >> 24 ) & 0xFF ];    \
+                                                \
+    X3 = *RK++ ^ FT0[ ( Y3       ) & 0xFF ] ^   \
+                 FT1[ ( Y0 >>  8 ) & 0xFF ] ^   \
+                 FT2[ ( Y1 >> 16 ) & 0xFF ] ^   \
+                 FT3[ ( Y2 >> 24 ) & 0xFF ];    \
+}
+
+#define SIMPLE_AES_RROUND(X0,X1,X2,X3,Y0,Y1,Y2,Y3)     \
+{                                               \
+    X0 = *RK++ ^ RT0[ ( Y0       ) & 0xFF ] ^   \
+                 RT1[ ( Y3 >>  8 ) & 0xFF ] ^   \
+                 RT2[ ( Y2 >> 16 ) & 0xFF ] ^   \
+                 RT3[ ( Y1 >> 24 ) & 0xFF ];    \
+                                                \
+    X1 = *RK++ ^ RT0[ ( Y1       ) & 0xFF ] ^   \
+                 RT1[ ( Y0 >>  8 ) & 0xFF ] ^   \
+                 RT2[ ( Y3 >> 16 ) & 0xFF ] ^   \
+                 RT3[ ( Y2 >> 24 ) & 0xFF ];    \
+                                                \
+    X2 = *RK++ ^ RT0[ ( Y2       ) & 0xFF ] ^   \
+                 RT1[ ( Y1 >>  8 ) & 0xFF ] ^   \
+                 RT2[ ( Y0 >> 16 ) & 0xFF ] ^   \
+                 RT3[ ( Y3 >> 24 ) & 0xFF ];    \
+                                                \
+    X3 = *RK++ ^ RT0[ ( Y3       ) & 0xFF ] ^   \
+                 RT1[ ( Y2 >>  8 ) & 0xFF ] ^   \
+                 RT2[ ( Y1 >> 16 ) & 0xFF ] ^   \
+                 RT3[ ( Y0 >> 24 ) & 0xFF ];    \
+}
+
+/*
+ * AES-ECB block encryption/decryption
+ */
+int simple_aes_crypt_ecb( simple_aes_context *ctx,
+                    int mode,
+                    const unsigned char input[16],
+                    unsigned char output[16] )
+{
+    int i;
+    unsigned long *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;
+
+    RK = ctx->rk;
+
+    SIMPLE_AES_GET_ULONG_LE( X0, input,  0 ); X0 ^= *RK++;
+    SIMPLE_AES_GET_ULONG_LE( X1, input,  4 ); X1 ^= *RK++;
+    SIMPLE_AES_GET_ULONG_LE( X2, input,  8 ); X2 ^= *RK++;
+    SIMPLE_AES_GET_ULONG_LE( X3, input, 12 ); X3 ^= *RK++;
+
+    if( mode == SIMPLE_AES_DECRYPT )
+    {
+        for( i = (ctx->nr >> 1) - 1; i > 0; i-- )
+        {
+            SIMPLE_AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
+            SIMPLE_AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
+        }
+
+        SIMPLE_AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
+
+        X0 = *RK++ ^ \
+                ( (unsigned long) RSb[ ( Y0       ) & 0xFF ]       ) ^
+                ( (unsigned long) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
+                ( (unsigned long) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
+                ( (unsigned long) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
+
+        X1 = *RK++ ^ \
+                ( (unsigned long) RSb[ ( Y1       ) & 0xFF ]       ) ^
+                ( (unsigned long) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
+                ( (unsigned long) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
+                ( (unsigned long) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
+
+        X2 = *RK++ ^ \
+                ( (unsigned long) RSb[ ( Y2       ) & 0xFF ]       ) ^
+                ( (unsigned long) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
+                ( (unsigned long) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
+                ( (unsigned long) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
+
+        X3 = *RK++ ^ \
+                ( (unsigned long) RSb[ ( Y3       ) & 0xFF ]       ) ^
+                ( (unsigned long) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
+                ( (unsigned long) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
+                ( (unsigned long) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
+    }
+    else /* AES_ENCRYPT */
+    {
+        for( i = (ctx->nr >> 1) - 1; i > 0; i-- )
+        {
+            SIMPLE_AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
+            SIMPLE_AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
+        }
+
+        SIMPLE_AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
+
+        X0 = *RK++ ^ \
+                ( (unsigned long) FSb[ ( Y0       ) & 0xFF ]       ) ^
+                ( (unsigned long) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
+                ( (unsigned long) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
+                ( (unsigned long) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
+
+        X1 = *RK++ ^ \
+                ( (unsigned long) FSb[ ( Y1       ) & 0xFF ]       ) ^
+                ( (unsigned long) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
+                ( (unsigned long) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
+                ( (unsigned long) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
+
+        X2 = *RK++ ^ \
+                ( (unsigned long) FSb[ ( Y2       ) & 0xFF ]       ) ^
+                ( (unsigned long) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
+                ( (unsigned long) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
+                ( (unsigned long) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
+
+        X3 = *RK++ ^ \
+                ( (unsigned long) FSb[ ( Y3       ) & 0xFF ]       ) ^
+                ( (unsigned long) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
+                ( (unsigned long) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
+                ( (unsigned long) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
+    }
+
+    SIMPLE_AES_PUT_ULONG_LE( X0, output,  0 );
+    SIMPLE_AES_PUT_ULONG_LE( X1, output,  4 );
+    SIMPLE_AES_PUT_ULONG_LE( X2, output,  8 );
+    SIMPLE_AES_PUT_ULONG_LE( X3, output, 12 );
+
+    return( 0 );
+}
+EXPORT_SYMBOL(simple_aes_crypt_ecb);
+
+/*
+ * AES-CBC buffer encryption/decryption
+ */
+int simple_aes_crypt_cbc( simple_aes_context *ctx,
+                    int mode,
+                    long long int length,
+                    unsigned char iv[16],
+                    const unsigned char *input,
+                    unsigned char *output )
+{
+    int i;
+    unsigned char temp[16];
+
+    if( length % 16 )
+        return( SIMPLE_AES_INVALID_INPUT_LENGTH );
+
+    if( mode == SIMPLE_AES_DECRYPT )
+    {
+        while( length > 0 )
+        {
+            memcpy( temp, input, 16 );
+            simple_aes_crypt_ecb( ctx, mode, input, output );
+
+            for( i = 0; i < 16; i++ )
+                output[i] = (unsigned char)( output[i] ^ iv[i] );
+
+            memcpy( iv, temp, 16 );
+
+            input  += 16;
+            output += 16;
+            length -= 16;
+        }
+    }
+    else
+    {
+        while( length > 0 )
+        {
+            for( i = 0; i < 16; i++ )
+                output[i] = (unsigned char)( input[i] ^ iv[i] );
+
+            simple_aes_crypt_ecb( ctx, mode, output, output );
+            memcpy( iv, output, 16 );
+
+            input  += 16;
+            output += 16;
+            length -= 16;
+        }
+    }
+
+    return( 0 );
+}
+EXPORT_SYMBOL(simple_aes_crypt_cbc);
+
+/*
+ * AES-CTR buffer encryption/decryption
+ */
+int simple_aes_crypt_ctr( simple_aes_context *ctx,
+                       size_t length,
+                       size_t *nc_off,
+                       unsigned char nonce_counter[16],
+                       unsigned char stream_block[16],
+                       const unsigned char *input,
+                       unsigned char *output )
+{
+    int c, i;
+    size_t n = *nc_off;
+
+    while( length-- )
+    {
+        if( n == 0 ) {
+            simple_aes_crypt_ecb( ctx, SIMPLE_AES_ENCRYPT, nonce_counter, stream_block );
+
+            for( i = 16; i > 0; i-- )
+                if( ++nonce_counter[i - 1] != 0 )
+                    break;
+        }
+        c = *input++;
+        *output++ = (unsigned char)( c ^ stream_block[n] );
+
+        n = (n + 1) & 0x0F;
+    }
+
+    *nc_off = n;
+
+    return( 0 );
+}
+EXPORT_SYMBOL(simple_aes_crypt_ctr);
+
+void simple_aes_xor128 (void *pa, const void *pb)
+{
+	u64 *a = (u64 *)pa;
+	u64 *b = (u64 *)pb;
+
+	a[0] ^= b[0];
+	a[1] ^= b[1];
+}
+EXPORT_SYMBOL(simple_aes_xor128);
+
diff --git a/fs/ubifs/Kconfig b/fs/ubifs/Kconfig
index 830e3f7..3f6d0cd 100644
--- a/fs/ubifs/Kconfig
+++ b/fs/ubifs/Kconfig
@@ -10,6 +10,15 @@ config UBIFS_FS
 	depends on MTD_UBI
 	help
 	  UBIFS is a file system for flash devices which works on top of UBI.
+	  
+config UBIFS_FS_CRYPTO
+	bool "AES encryption for data nodes"
+	depends on UBIFS_FS
+	default n
+	help
+	  This option allows to perform AES encryption for data nodes
+	  
+	  If unsure, say 'N'.
 
 config UBIFS_FS_XATTR
 	bool "Extended attributes support"
diff --git a/fs/ubifs/compress.c b/fs/ubifs/compress.c
index 11e4132..8140768 100644
--- a/fs/ubifs/compress.c
+++ b/fs/ubifs/compress.c
@@ -29,6 +29,10 @@
 
 #include <linux/crypto.h>
 #include "ubifs.h"
+#include <linux/scatterlist.h>
+#ifdef CONFIG_UBIFS_FS_CRYPTO
+#include <crypto/simple_aes.h>
+#endif
 
 /* Fake description object for the "none" compressor */
 static struct ubifs_compressor none_compr = {
@@ -75,6 +79,96 @@ static struct ubifs_compressor zlib_compr = {
 struct ubifs_compressor *ubifs_compressors[UBIFS_COMPR_TYPES_CNT];
 
 /**
+ * ubifs_aes_crypt - encrypt / decrypt data.
+ * @str: the data to crypt
+ * @len: length of the data
+ * @crypto_key: the cryptographic key to use to crypt the data
+ *
+ * This function applies AES encryption to the data. It is done in counter
+ * mode, which means that encryption and decryption are the same operation,
+ * i.e., it XORs the same generated bitstream, so it can be used both for
+ * encryption / decryption. Returns zero in case of success and a negative
+ * error code in case of failure.
+ *
+ * WARNING: The operation is done in-place, so @str mutates!
+ */
+#ifdef CONFIG_UBIFS_FS_CRYPTO
+extern u8 ubifs_crypto_key[];
+extern u8 ubifs_crypto_iv[];
+static int ubifs_aes_encrypt(u8 *str, int len)
+{
+	unsigned char iv[SIMPLE_AES_IV_LEN];
+	unsigned char tmp0[SIMPLE_AES_CBC_LEN], tmp1[SIMPLE_AES_CBC_LEN];
+	simple_aes_context aes_ctx;
+	size_t len_n, len_m;
+
+	memset(&aes_ctx, 0, sizeof(aes_ctx));
+
+	simple_aes_setkey_enc(&aes_ctx, ubifs_crypto_key, 128);
+	memcpy(iv, ubifs_crypto_iv, sizeof(iv));
+
+	len_m = len % SIMPLE_AES_CBC_LEN;
+	len_n = len - len_m;
+
+	simple_aes_crypt_cbc(&aes_ctx, SIMPLE_AES_ENCRYPT, len_n, (unsigned char *)iv, (unsigned char *)str, (unsigned char *)str);
+
+	if (len_m) {
+		memset(tmp0, 0, SIMPLE_AES_CBC_LEN);
+		memcpy(tmp0, str + len_n, len_m);
+		simple_aes_crypt_cbc(&aes_ctx, SIMPLE_AES_ENCRYPT, SIMPLE_AES_CBC_LEN, (unsigned char *)iv, tmp0, tmp1);
+		memcpy(str + len_n, str + len_n - SIMPLE_AES_CBC_LEN, len_m);
+		memcpy(str + len_n - SIMPLE_AES_CBC_LEN, tmp1, SIMPLE_AES_CBC_LEN);
+	}
+
+	return 0;
+}
+
+static int ubifs_aes_decrypt(u8 *str, int len)
+{
+	unsigned char iv[SIMPLE_AES_IV_LEN];
+	unsigned char tmp0[SIMPLE_AES_CBC_LEN], tmp1[SIMPLE_AES_CBC_LEN];
+	simple_aes_context aes_ctx;
+	size_t len_n, len_m;
+
+	memset(&aes_ctx, 0, sizeof(aes_ctx));
+
+	simple_aes_setkey_dec(&aes_ctx, ubifs_crypto_key, 128);
+	memcpy(iv, ubifs_crypto_iv, sizeof(iv));
+
+	len_m = len % SIMPLE_AES_CBC_LEN;
+	len_n = len - len_m;
+
+	if (len_m) {
+		simple_aes_crypt_cbc(&aes_ctx, SIMPLE_AES_DECRYPT, len_n - SIMPLE_AES_CBC_LEN,
+				      (unsigned char *)iv, (unsigned char *)str, (unsigned char *)str);
+		simple_aes_crypt_ecb(&aes_ctx, SIMPLE_AES_DECRYPT,
+			      (unsigned char *)(str + len_n - SIMPLE_AES_CBC_LEN), tmp0);
+		memset(tmp1, 0, SIMPLE_AES_CBC_LEN);
+		memcpy(tmp1, str + len_n, len_m);
+		simple_aes_xor128(tmp0, tmp1);
+		memcpy(str + len_n, tmp0, len_m);
+		memcpy(tmp1 + len_m, tmp0 + len_m, SIMPLE_AES_CBC_LEN - len_m);
+		simple_aes_crypt_ecb(&aes_ctx, SIMPLE_AES_DECRYPT, tmp1,
+			      (unsigned char *)(str + len_n - SIMPLE_AES_CBC_LEN));
+		simple_aes_xor128(str + len_n - SIMPLE_AES_CBC_LEN, (unsigned char *)iv);
+	} else {
+		simple_aes_crypt_cbc(&aes_ctx, SIMPLE_AES_DECRYPT, len,
+				      (unsigned char *)iv, (unsigned char *)str, (unsigned char *)str);
+	}
+
+	return 0;
+}
+
+static void ubifs_scrambler(u8 *buf, int len)
+{
+	int i;
+
+	for (i = 0; i < len; i++)
+		buf[i] ^= ubifs_crypto_iv[i % 16];
+}
+#endif
+
+/**
  * ubifs_compress - compress data.
  * @in_buf: data to compress
  * @in_len: length of the data to compress
@@ -125,12 +219,26 @@ void ubifs_compress(const void *in_buf, int in_len, void *out_buf, int *out_len,
 	if (in_len - *out_len < UBIFS_MIN_COMPRESS_DIFF)
 		goto no_compr;
 
+#ifdef CONFIG_UBIFS_FS_CRYPTO
+	if (*out_len < 64)
+		ubifs_scrambler((u8 *)out_buf, *out_len);
+	else
+		ubifs_aes_encrypt((u8 *)out_buf, *out_len);
+#endif
+
 	return;
 
 no_compr:
 	memcpy(out_buf, in_buf, in_len);
 	*out_len = in_len;
 	*compr_type = UBIFS_COMPR_NONE;
+
+#ifdef CONFIG_UBIFS_FS_CRYPTO
+	if (*out_len < 64)
+		ubifs_scrambler((u8 *)out_buf, *out_len);
+	else
+		ubifs_aes_encrypt((u8 *)out_buf, *out_len);
+#endif
 }
 
 /**
@@ -144,6 +252,8 @@ no_compr:
  * This function decompresses data from buffer @in_buf into buffer @out_buf.
  * The length of the uncompressed data is returned in @out_len. This functions
  * returns %0 on success or a negative error code on failure.
+ *
+ * WARNING: this function may modify the contents of @in_buf!
  */
 int ubifs_decompress(const void *in_buf, int in_len, void *out_buf,
 		     int *out_len, int compr_type)
@@ -163,6 +273,13 @@ int ubifs_decompress(const void *in_buf, int in_len, void *out_buf,
 		return -EINVAL;
 	}
 
+#ifdef CONFIG_UBIFS_FS_CRYPTO
+		if (in_len < 64)
+			ubifs_scrambler((u8 *)in_buf, in_len);
+		else
+			ubifs_aes_decrypt((u8 *)in_buf, in_len);
+#endif
+
 	if (compr_type == UBIFS_COMPR_NONE) {
 		memcpy(out_buf, in_buf, in_len);
 		*out_len = in_len;
diff --git a/fs/ubifs/super.c b/fs/ubifs/super.c
index 8440ba8..7722c4a 100644
--- a/fs/ubifs/super.c
+++ b/fs/ubifs/super.c
@@ -2087,6 +2087,18 @@ out_close:
 	return err;
 }
 
+#ifdef CONFIG_UBIFS_FS_CRYPTO
+#define UBIFS_CRYPTO_KEYSIZE 16
+u8 ubifs_crypto_key[UBIFS_CRYPTO_KEYSIZE];
+u8 ubifs_crypto_iv[UBIFS_CRYPTO_KEYSIZE];
+void __init init_ubifs_crypto(char *key, char *iv)
+{
+	memcpy(ubifs_crypto_key, key, sizeof(ubifs_crypto_key));
+	memcpy(ubifs_crypto_iv, iv, sizeof(ubifs_crypto_iv));
+}
+EXPORT_SYMBOL(init_ubifs_crypto);
+#endif
+
 static struct file_system_type ubifs_fs_type = {
 	.name    = "ubifs",
 	.owner   = THIS_MODULE,
diff --git a/include/crypto/simple_aes.h b/include/crypto/simple_aes.h
new file mode 100644
index 0000000..414681c
--- /dev/null
+++ b/include/crypto/simple_aes.h
@@ -0,0 +1,178 @@
+/**
+ * \file simple_aes.h
+ *
+ *  Copyright (C) 2011, Con Kolivas <kernel@kolivas.org>
+ *  Copyright (C) 2006-2010, Brainspark B.V.
+ *
+ *  This file is part of PolarSSL (http://www.polarssl.org)
+ *  Lead Maintainer: Paul Bakker <polarssl_maintainer at polarssl.org>
+ *
+ *  All rights reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with this program; if not, write to the Free Software Foundation, Inc.,
+ *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+#ifndef SIMPLE_AES_H
+#define SIMPLE_AES_H
+
+#define SIMPLE_AES_ENCRYPT     1
+#define SIMPLE_AES_DECRYPT     0
+
+#define SIMPLE_AES_INVALID_KEY_LENGTH                 -0x0800
+#define SIMPLE_AES_INVALID_INPUT_LENGTH               -0x0810
+
+#define SIMPLE_AES_HASH_LEN	64
+#define SIMPLE_AES_CBC_LEN		16
+#define SIMPLE_AES_IV_LEN		16
+
+/**
+ * \brief          AES context structure
+ */
+typedef struct
+{
+    int nr;                     /*!<  number of rounds  */
+    unsigned long *rk;          /*!<  AES round keys    */
+    unsigned long buf[68];      /*!<  unaligned data    */
+}
+simple_aes_context;
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/**
+ * \brief          AES key schedule (encryption)
+ *
+ * \param ctx      AES context to be initialized
+ * \param key      encryption key
+ * \param keysize  must be 128, 192 or 256
+ *
+ * \return         0 if successful, or SIMPLE_AES_INVALID_KEY_LENGTH
+ */
+int simple_aes_setkey_enc( simple_aes_context *ctx, const unsigned char *key, int keysize );
+
+/**
+ * \brief          AES key schedule (decryption)
+ *
+ * \param ctx      AES context to be initialized
+ * \param key      decryption key
+ * \param keysize  must be 128, 192 or 256
+ *
+ * \return         0 if successful, or SIMPLE_AES_INVALID_KEY_LENGTH
+ */
+int simple_aes_setkey_dec( simple_aes_context *ctx, const unsigned char *key, int keysize );
+
+/**
+ * \brief          AES-ECB block encryption/decryption
+ *
+ * \param ctx      AES context
+ * \param mode     AES_ENCRYPT or AES_DECRYPT
+ * \param input    16-byte input block
+ * \param output   16-byte output block
+ *
+ * \return         0 if successful
+ */
+int simple_aes_crypt_ecb( simple_aes_context *ctx,
+                    int mode,
+                    const unsigned char input[16],
+                    unsigned char output[16] );
+
+/**
+ * \brief          AES-CBC buffer encryption/decryption
+ *                 Length should be a multiple of the block
+ *                 size (16 bytes)
+ *
+ * \param ctx      AES context
+ * \param mode     AES_ENCRYPT or AES_DECRYPT
+ * \param length   length of the input data
+ * \param iv       initialization vector (updated after use)
+ * \param input    buffer holding the input data
+ * \param output   buffer holding the output data
+ *
+ * \return         0 if successful, or SIMPLE_AES_INVALID_INPUT_LENGTH
+ */
+int simple_aes_crypt_cbc( simple_aes_context *ctx,
+                    int mode,
+                    long long int length,
+                    unsigned char iv[16],
+                    const unsigned char *input,
+                    unsigned char *output );
+
+/**
+ * \brief          AES-CFB128 buffer encryption/decryption.
+ *
+ * \param ctx      AES context
+ * \param mode     AES_ENCRYPT or AES_DECRYPT
+ * \param length   length of the input data
+ * \param iv_off   offset in IV (updated after use)
+ * \param iv       initialization vector (updated after use)
+ * \param input    buffer holding the input data
+ * \param output   buffer holding the output data
+ *
+ * \return         0 if successful
+ */
+int simple_aes_crypt_cfb128( simple_aes_context *ctx,
+                       int mode,
+                       int length,
+                       int *iv_off,
+                       unsigned char iv[16],
+                       const unsigned char *input,
+                       unsigned char *output );
+
+/**
+ * \brief               AES-CTR buffer encryption/decryption
+ *
+ * Warning: You have to keep the maximum use of your counter in mind!
+ *
+ * Note: Due to the nature of CTR you should use the same key schedule for
+ * both encryption and decryption. So a context initialized with
+ * aes_setkey_enc() for both AES_ENCRYPT and AES_DECRYPT.
+ *
+ * \param length        The length of the data
+ * \param nc_off        The offset in the current stream_block (for resuming
+ *                      within current cipher stream). The offset pointer to
+ *                      should be 0 at the start of a stream.
+ * \param nonce_counter The 128-bit nonce and counter.
+ * \param stream_block  The saved stream-block for resuming. Is overwritten
+ *                      by the function.
+ * \param input         The input data stream
+ * \param output        The output data stream
+ *
+ * \return         0 if successful
+ */
+int simple_aes_crypt_ctr( simple_aes_context *ctx,
+                       size_t length,
+                       size_t *nc_off,
+                       unsigned char nonce_counter[16],
+                       unsigned char stream_block[16],
+                       const unsigned char *input,
+                       unsigned char *output );
+
+
+/**
+ * \brief          Checkup routine
+ *
+ * \return         0 if successful, or 1 if the test failed
+ */
+int simple_aes_self_test( int verbose );
+
+void simple_aes_xor128(void *pa, const void *pb);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* simple_aes.h */
+
+
-- 
1.8.2.1

